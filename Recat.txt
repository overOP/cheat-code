â€”â€”â€”â€”â€”â€”â€”â€” Recatâ€”â€”â€”â€”â€”â€”â€”â€”â€”â€”
Clear
                To make files
pwd

cd Documents

npm create vite@latest

â—‡  Project name:
â”‚  vite-project                    we always give the name like
â”‚
â—‡  Select a framework:
â”‚  React
â”‚
â—‡  Select a variant:
â”‚  JavaScript



                       Now run

cd vite-project
 npm install
 npm run build
 npm run dev 


â€”â€”â€”â€”â€”â€”â€”â€”â€”â€” react-router â€”â€”â€”â€”â€”â€”â€”â€”â€”â€”â€”
 npm i react-router installs the React Router library, which is used for handling navigation and routing in React apps.
Use it when:â€¨You need multiple pages or dynamic navigation in a single-page React application (e.g., Home, About, Dashboard pages).

â€”â€”â€”â€”â€”â€”â€”â€”â€”â€”â€” 1 â€”â€”â€”â€”â€”â€”â€”â€”â€”â€”â€”â€”â€”â€”â€”â€”
Here's how to use React Router in a few simple steps:
1. Install it:
bash

npm install react-router-dom

2. Wrap your app in a Router:
jsx

import { BrowserRouter } from 'react-router-dom';
import App from './App';

const Root = () => (
  <BrowserRouter>
    <App />
  </BrowserRouter>
);

3. Define your routes:
In App.js:
jsx

import { Routes, Route } from 'react-router-dom';
import Home from './Home';
import About from './About';

function App() {
  return (
    <Routes>
      <Route path="/" element={<Home />} />
      <Route path="/about" element={<About />} />
    </Routes>
  );
}

4. Add navigation links:
jsx

import { Link } from 'react-router-dom';

<Link to="/">Home</Link>
<Link to="/about">About</Link>

â€”â€”â€”â€”â€”â€”â€”â€”â€”â€”â€”â€”â€”â€”â€” 2 â€”â€”â€”â€”â€”â€”â€”â€”â€”â€”â€”â€”â€”â€”â€”â€”â€”â€”â€”â€”

Folder = Data
     File =  navData.js
 
export const navData = [
    {
        id: 1,
        title: "Home",
        url: "/",
    },
    {
        id: 2,
        title: "Contact",
        url: "/contact",
    },
];

â€”â€”â€”â€”â€”
Folder = Layout
    File =  MainLayOut.jsx

import React from 'react'
import { Outlet } from 'react-router'//outlet is used to render child routes
import Nav from '../components/Nav'
import Footer from '../components/Footer'

const MainLayOut = () => {
  return (
   <>
    <header>
        <Nav />
    </header>
    <main>
        <Outlet />
    </main>
    <footer>
        <Footer />
    </footer>
   </>
  )
}

export default MainLayOut

â€”â€”â€”â€”â€”
File =  Routes.jsx

import { createBrowserRouter } from "react-router";
import MainLayout from "./Layout/MainLayOut";
import Home from "./components/Home";

export const router = createBrowserRouter([
    {
        path: "/",
        element:<MainLayout />,
        children: [
            {
                path: "/",
                element: <Home />,
            },            
        ],
    }
])


â€”â€”â€”â€”â€”â€”â€”
And in Nav.jsx

import { NavLink } from 'react-router'
import { navData } from '../Data/navData'

          <ul>
            {navData.map((item, index) => (
              <li key={index} className="text-gray-300 hover:text-gray-400">
                <NavLink to={item.url}>{item.title}</NavLink>
              </li>
            ))}
          </ul>



â€”â€”â€”â€”â€”â€”â€”â€”- react-icons â€”â€”â€”â€”â€”â€”â€”â€”â€”â€”â€”â€”
 npm i react-icons is a command that installs the react-icons package in your project.
Use it when you want to easily add popular icons (like Font Awesome, Material Icons, etc.) as React components. It's lightweight and saves you from manually importing icon fonts or SVGs.

Here's how to use react-icons in your React project:
ðŸ›  Install the package:
bash

npm install react-icons

ðŸ“¦ Import the icon you want:
js

import { FaBeer } from "react-icons/fa"; // 'fa' stands for Font Awesome

âœ… Use it like a regular component:
jsx

function MyComponent() {
  return <h1>Cheers! <FaBeer /></h1>;
}

Thatâ€™s it! ðŸŽ‰ The icon will render inline and can be styled like any other React component (e.g., size, color).


â€”â€”â€”â€”â€”â€”â€”â€”â€” Â react-spinners â€”â€”â€”â€”â€”â€”â€”â€”â€”
 npm i react-spinners installs the react-spinners library, which provides a collection of loading spinner components for React apps.
Use it when you want to show a visual loading indicator (like a spinner or dot animation) while data is being fetched or an action is processing in your UI.

Hereâ€™s how to use react-spinners in a React project:
ðŸ“¦ Install the package:
bash

npm install react-spinners

ðŸ’» Import a spinner in your component:
jsx

import { ClipLoader } from 'react-spinners';

ðŸŽ¯ Use it in your JSX:
jsx

<ClipLoader color="#36d7b7" loading={true} size={50} />

âœ… Example with conditional rendering:
jsx

function MyComponent({ isLoading }) {
  return (
    <div>
      {isLoading ? (
        <ClipLoader color="#36d7b7" size={50} />
      ) : (
        <p>Data loaded!</p>
      )}
    </div>
  );
}
Use it anywhere you want a loader while data is being fetched or something is loading. You can choose from different spinner styles like BounceLoader, BeatLoader, etc.

â€”â€”â€”â€”â€”â€”â€”â€”â€”â€” axios â€”â€”â€”â€”â€”â€”â€”â€”â€”â€”â€”â€”â€”â€”â€”

npm i axios is a command to install the Axios library in a Node.js or frontend project.
Axios is a promise-based HTTP client used to make API requests (GET, POST, etc.) from the browser or Node.js.
ðŸ‘‰ Use it when you need to fetch or send data to a server (e.g., calling a REST API).

Hereâ€™s how to use Axios in a project:
1. Install Axios
Run this in your terminal inside your project folder:
bash

npm i axios

â€”â€”â€”â€”â€”
file = .env
         VITE_BACKEND_API=http://localhost:3000/
â€”â€”â€”â€”
Folder = confilg
     File = Axios.jsx
 import axios from "axios";

const token = localStorage.getItem("accessToken")
export const http = axios.create({
    baseURL:import.meta.env.VITE_BACKEND_API,
    headers: {
        Authorization:token
    }
})


â€”â€”â€”â€”â€”
import { http } from '../config/axios';


const signup = async (data) => {
  try {
     // Uncomment the line below to use axios directly
    const response = await http.post('users/signUp', data);
    // const response = await axios.post(`${import.meta.env.VITE_BACKEND_API}users/signUp`, data);
    console.log(response.data);
    if (response.data.success) {
      alert('SignUp successful');
    }
    // Store the token in local storage
    const accessToken = response.data.accessToken;
    localStorage.setItem('accessToken', accessToken);
    // Store the user data in local storage
    const userData = response.data.user;
    localStorage.setItem('userData', JSON.stringify(userData));
    // Redirect to the home page
    navigate('/');
  } catch (error) {
    console.error('Error:', error);
    alert('SignUp failed');
  }
}



â€”â€”â€”â€”â€”â€”â€”â€”â€” react-paginate â€”â€”â€”â€”â€”â€”â€”â€”â€”â€”â€”â€”â€”â€”â€”â€”

npm i react-paginate installs the react-paginate package â€” a React component that makes it easy to add pagination controls (like page numbers, next/prev buttons) to your app.
Use it when:
âœ… You have a long list of data (e.g., posts, products, search results) and want to break it into multiple pages for better performance and user experience.
Example: A blog with 100 posts, but only 10 shown per page.

Here's a quick example of how to use react-paginate:
1. Install it:
bash

npm i react-paginate

2 Use in your React component:

import React, { useState } from "react";
import ReactPaginate from "react-paginate";

const Paginate = () => {
  const items = Array.from(
    {
      length: 100,
    },
    (_, index) => `item ${index + 1} `
  );
  const itemsPerPage = 10;

  const [currentPage, setCurrentPage] = useState(0);
    
  const offset = currentPage * itemsPerPage;
  const currentItems = items.slice(offset, offset + itemsPerPage);//it is used to get a part of an array
  //slice() method returns selected elements in an array, as a new array
  const pageCount = Math.ceil(items.length / itemsPerPage);
  //ceil() method rounds a number up to its nearest integer
  const handlePageClick = ({ selected: selectedPage }) => {
    setCurrentPage(selectedPage);
  }
  return (
    <>
      <div className="bg-[#a6a3d9] min-h-screen p-8  font-sans text-white">
      <ul className="flex flex-wrap items-center justify-center border-2 border-blue-500 rounded-lg p-3 m-2">
        {
            currentItems.map((item, index) => (
                <li key={index} className="m-2">{item}</li>
            ))
        }
      </ul>
        <ReactPaginate
            pageCount={pageCount}
            onPageChange={handlePageClick}
            previousLabel={"<"}
            nextLabel={">"}
            containerClassName="pagination"
            activeClassName="active"
            pageRangeDisplayed={5}
            marginPagesDisplayed={2}
            className="flex items-center justify-center gap-4 m-4 border-2 border-blue-500 rounded-lg p-3 "
        />
      </div>
    </>
  );
};

export default Paginate;

How it works:
* pageCount: Total pages based on your data size.
* onPageChange: Updates the current page when user clicks.
* Shows only items for the current page.


â€”â€”â€”â€”â€”â€”â€”â€”â€”â€” dark-mode-toggle â€”â€”â€”â€”â€”â€”â€”â€”â€”â€”â€”â€”â€”â€”â€”
npm i dark-mode-toggle installs a ready-made toggle switch for dark/light mode in your web app.
Use it when: You want a quick, easy way to add dark mode switching without building it from scratch.

For React, hereâ€™s a simple way to use dark-mode-toggle:
1. Install it:
bash

npm i dark-mode-toggle

1. Create a React component to wrap the web component:
jsx

import React, { useEffect } from 'react';
import 'dark-mode-toggle';  // Import the web component

const DarkModeToggle = () => {
  // No extra logic needed, just use the custom element tag
  return <dark-mode-toggle></dark-mode-toggle>;
};

export default DarkModeToggle;
1. Use it in your app:
jsx

import React from 'react';
import DarkModeToggle from './DarkModeToggle';

function App() {
  return (
    <div>
      <h1>My React App</h1>
      <DarkModeToggle />
    </div>
  );
}

export default App;

Note:â€¨Make sure your CSS supports dark mode styles (e.g., using [data-theme="dark"] or prefers-color-scheme), because the toggle just switches the theme and saves preference â€” it doesnâ€™t apply styles by itself.

â€”â€”â€”â€”â€”â€”â€”â€”â€”â€”â€”â€” react-hook-form â€”â€”â€”â€”â€”â€”â€”â€”â€”â€”â€”â€”â€”â€”
npm i react-hook-form installs React Hook Form, a lightweight library to handle form state and validation in React apps.
Use it when:â€¨You want easy, performant, and simple form handling with minimal code and built-in validation.



1. Install it:
bash
npm i react-hook-form


â€”â€”â€”
File = input.jsx

import React from 'react'

const Input = ({type, className, ...data}) => {
  return (
    <>
    <input 
    type={type} 
    {...data}
    className= {`w-full p-3 border rounded-md focus:outline-none focus:ring-2 focus:ring-blue-500 ${className}`} />
    </>
  )
}

export default Input
â€”â€”â€”â€”â€”â€”
For all input

            <Input
              type="email"
              placeholder="Email Address"
              {...register('email', {
                required: 'Email is required',
              })}
            />

â€”â€”â€”â€”â€”â€”â€”â€”â€”â€”â€”â€”â€”â€”â€”â€”  Â react-dropzone â€”â€”â€”â€”â€”â€”â€”â€”â€”â€”â€”â€”
npm i react-dropzone installs React Dropzone, a React library for easy drag-and-drop file uploads.
Use it when:â€¨You want a simple way to let users drag and drop files or click to upload files in your React app.

Hereâ€™s a quick example of how to use react-dropzone:
1. Install it:
bash

npm i react-dropzone
1. Use it in your React component:
jsx

import React, { useCallback } from 'react';
import { useDropzone } from 'react-dropzone';

function MyDropzone() {
  const onDrop = useCallback(acceptedFiles => {
    // Handle the files here
    console.log(acceptedFiles);
  }, []);

  const { getRootProps, getInputProps, isDragActive } = useDropzone({ onDrop });

  return (
    <div {...getRootProps()} style={{
      border: '2px dashed #888',
      padding: '20px',
      textAlign: 'center',
      cursor: 'pointer'
    }}>
      <input {...getInputProps()} />
      {isDragActive ? <p>Drop files here...</p> : <p>Drag & drop some files, or click to select files</p>}
    </div>
  );
}

export default MyDropzone;

How it works:

useDropzone provides props to handle drag/drop and file input.

You style the drop area and handle files inside the onDrop callback.

Users can drag files over the area or click to open the file dialog.

â€”â€”â€”â€”â€”â€”â€”â€”â€”â€”â€” zustand â€”â€”â€”â€”â€”â€”â€”â€”â€”â€”â€”â€”â€”â€”
npm i zustand installs Zustand, a small, fast React state management library.
When to use it?â€¨Use Zustand when you want simple, scalable, and minimal global state management in React apps without the boilerplate of Redux or Context API. Perfect for medium-to-large projects needing easy shared state.

Hereâ€™s a quick example of how to use Zustand in a React app:
1. Install:
bash

npm i zustand

1. Create a store:
js

import create from 'zustand';

const useStore = create(set => ({
  count: 0,
  increment: () => set(state => ({ count: state.count + 1 })),
  reset: () => set({ count: 0 }),
}));

1. Use it in a component:
jsx

function Counter() {
  const { count, increment, reset } = useStore();
  return (
    <>
      <h1>{count}</h1>
      <button onClick={increment}>Increase</button>
      <button onClick={reset}>Reset</button>
    </>
  );
}
Thatâ€™s it! Your state is global, reactive, and super simple to manage. No Redux boilerplate needed.

â€”â€”â€”â€”â€”â€”â€”â€”â€”â€” @gsap/react â€”â€”â€”â€”â€”â€”â€”â€”â€”â€”â€”
npm install @gsap/react installs the GSAP React plugin, which helps you easily use GSAP animations in React apps with React-friendly components and hooks.
Use it when:â€¨You want to create smooth, performant animations in a React project using GSAP with better integration and easier syntax.

Hereâ€™s a quick example of how to use @gsap/react after installing it:
1. Install:
bash

npm install gsap @gsap/react

1. Use in your React component:
jsx

import React from 'react';
import { Tween } from '@gsap/react';

function MyComponent() {
  return (
    <Tween
      from={{ opacity: 0, y: -50 }}
      to={{ opacity: 1, y: 0 }}
      duration={1}
    >
      <div>Hello, GSAP animation!</div>
    </Tween>
  );
}

export default MyComponent;

Whatâ€™s happening?
* The <Tween> component animates the child div from opacity 0 and y-position -50 to fully visible and y 0, over 1 second.
* It wraps GSAP animation logic into a React-friendly component.

â€”â€”â€”â€”â€”â€”â€”â€” npm iÂ aos â€”â€”â€”â€”â€”â€”â€”â€”â€”â€”â€”â€”â€”â€”â€”â€”â€”
npm i aos is the command to install AOS (Animate On Scroll) â€” a lightweight library to add smooth scroll animations to your website elements.
Use it when:â€¨You want to easily add cool fade, slide, zoom, or other animations triggered as you scroll down a webpage.
 

1. Install AOS:
bash

npm i aos

1. Import and initialize AOS in your React component (usually in App.js or wherever you want):
jsx

import React, { useEffect } from 'react';
import AOS from 'aos';
import 'aos/dist/aos.css';

function App() {
  useEffect(() => {
    AOS.init({
      duration: 1000, // animation duration (ms)
    });
  }, []);

  return (
    <div>
      <h1 data-aos="fade-up">Hello, I fade up on scroll!</h1>
      <p data-aos="zoom-in" data-aos-delay="500">
        And I zoom in with a delay.
      </p>
    </div>
  );
}

export default App;

â€”â€”â€”â€”â€”â€”â€” react-slick â€”â€”â€”â€”â€”â€”â€”â€”â€”â€”â€”â€”â€”â€”â€”
npm i react-slick installs React Slick, a React component for creating responsive, customizable carousels/sliders.
Use it when:â€¨You want to add image sliders, content carousels, or any swipeable/scrollable slideshows in your React app easily.

Hereâ€™s a quick guide on how to use react-slick after running npm i react-slick:
1. Install dependencies
bash

npm i react-slick slick-carousel

You also need slick-carousel for CSS styles.

1. Import in your React component
jsx

import Slider from "react-slick";
import "slick-carousel/slick/slick.css"; 
import "slick-carousel/slick/slick-theme.css";

1. Add slider settings and slides
jsx

const settings = {
  dots: true,
  infinite: true,
  speed: 500,
  slidesToShow: 1,
  slidesToScroll: 1
};

function SimpleSlider() {
  return (
    <Slider {...settings}>
      <div><h3>Slide 1</h3></div>
      <div><h3>Slide 2</h3></div>
      <div><h3>Slide 3</h3></div>
    </Slider>
  );
}

export default SimpleSlider;


â€”â€”â€”â€”â€”â€”â€”â€” slick-carousel â€”â€”â€”â€”â€”â€”â€”â€”â€”â€”â€”â€”â€”â€”â€”
npm i slick-carousel installs the Slick Carousel plugin for your project.
Use it when you want an easy-to-implement, responsive, and customizable image/content slider or carousel in your web app.

Step 1: Install dependencies
bash

npm i slick-carousel jquery

React doesnâ€™t ship with jQuery, and Slick depends on it, so install both.

Step 2: Import styles and Slick
In your React component (e.g. Carousel.js):
jsx

import React, { useEffect } from 'react';
import $ from 'jquery';
import 'slick-carousel/slick/slick.css';
import 'slick-carousel/slick/slick-theme.css';
import 'slick-carousel';

const Carousel = () => {
  useEffect(() => {
    $('.your-slider').slick({
      dots: true,
      infinite: true,
      slidesToShow: 1,
      slidesToScroll: 1,
      autoplay: true,
      autoplaySpeed: 3000,
    });

    // Cleanup on unmount
    return () => {
      $('.your-slider').slick('unslick');
    };
  }, []);

  return (
    <div className="your-slider">
      <div><h3>Slide 1</h3></div>
      <div><h3>Slide 2</h3></div>
      <div><h3>Slide 3</h3></div>
    </div>
  );
};

export default Carousel;

Step 3: Use your carousel component
jsx

import React from 'react';
import Carousel from './Carousel';

function App() {
  return (
    <div>
      <h1>My Slick Carousel</h1>
      <Carousel />
    </div>
  );
}

export default App;


